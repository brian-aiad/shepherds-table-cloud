rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    /** ============================== Helpers =============================== */
    function lowerSafe(s) { return s == null ? null : lower(s); }
    function isAuthed()  { return request.auth != null; }

    // ðŸ”‘ Master override â€” CURRENT: email gate; PREFERRED: custom claim.
    function isMaster() {
      return isAuthed()
        && (
          // Preferred (flip this on once you set the claim)
          (request.auth.token.master == true)
          ||
          // Legacy (keep temporarily if you need a backdoor while rolling out claims)
          (lowerSafe(request.auth.token.email) == "csbrianaiad@gmail.com")
        );
    }

    // orgUsers doc id convention: "<uid>_<orgId>"
    function orgUser(rawOrgId) {
      return exists(/databases/$(database)/documents/orgUsers/$(request.auth.uid + "_" + rawOrgId))
        ? get(   /databases/$(database)/documents/orgUsers/$(request.auth.uid + "_" + rawOrgId)).data
        : null;
    }

    // Role checks (scoped to a specific org)
    function isAdminOfOrg(rawOrgId) {
      let ou = orgUser(rawOrgId);
      return isMaster() || (isAuthed() && ou != null && ou.role == "admin");
    }
    function isVolunteerOfOrg(rawOrgId) {
      let ou = orgUser(rawOrgId);
      return isAuthed() && ou != null && ou.role == "volunteer";
    }

    // Volunteers must be assigned to the location they access.
    function volunteerHasLocation(rawOrgId, rawLocationId) {
      let ou = orgUser(rawOrgId);
      return isVolunteerOfOrg(rawOrgId)
        && ou != null
        && ou.locationIds is list
        && (rawLocationId in ou.locationIds);
    }

    // Convenience: read/write permission for a scoped (orgId, locationId) thing
    function canReadScoped(orgId, locationId) {
      return isAdminOfOrg(orgId) || volunteerHasLocation(orgId, locationId);
    }
    function canWriteScoped(orgId, locationId) {
      return isAdminOfOrg(orgId) || volunteerHasLocation(orgId, locationId);
    }

    // Required fields for new tenant-scoped docs
    function hasOrgId()      { return (request.resource.data.orgId is string) && request.resource.data.orgId.size() > 0; }
    function hasLocationId() { return (request.resource.data.locationId is string) && request.resource.data.locationId.size() > 0; }

    /** ========================== Global master allow ======================= */
    // Master can read/write everything, everywhere.
    match /{document=**} {
      allow read, write: if isMaster();
    }

    /** ============================== users ================================== */
    // Per-account sticky scope, private to each user.
    match /users/{userId} {
      allow get, create, update: if isAuthed() && request.auth.uid == userId;
      allow list, delete: if false;
    }

    /** ============================= orgUsers ================================ */
    // Users can read ONLY their own orgUsers docs.
    match /orgUsers/{id} {
      allow read: if isAuthed()
        && resource.data != null
        && resource.data.userId == request.auth.uid;
      allow create, update, delete: if false; // master covered by global
    }

    /** ========================== organizations ============================== */
    // Only members (admin or volunteer) of an org can read that org's doc.
    match /organizations/{orgId} {
      allow read: if isAuthed() && (isAdminOfOrg(orgId) || isVolunteerOfOrg(orgId));
      allow create, update, delete: if false; // master via global
    }

    /** ============================ locations ================================ */
    // Only members of the parent org can read its locations.
    match /locations/{locationId} {
      allow read: if isAuthed()
        && resource.data != null
        && (isAdminOfOrg(resource.data.orgId) || isVolunteerOfOrg(resource.data.orgId));
      allow create, update, delete: if false; // master via global
    }

    /** ============================== clients ================================
     *  Admins: full CRUD inside their org (including hard delete).
     *  Volunteers: READ at assigned locations; may update ONLY visit counters
     *  and last-visit metadata (no tenant-scope changes, no profile edits).
     * =======================================================================
     */
    match /clients/{clientId} {
      // Read: admin of org OR volunteer assigned to client.locationId
      allow read: if isAuthed() && canReadScoped(resource.data.orgId, resource.data.locationId);

      // Create: admin OR volunteer assigned to the target location.
      // Must include orgId & locationId (comes from your form).
      allow create: if isAuthed()
        && hasOrgId()
        && hasLocationId()
        && (
          isAdminOfOrg(request.resource.data.orgId) ||
          volunteerHasLocation(request.resource.data.orgId, request.resource.data.locationId)
        );

      // Update:
      //  â€¢ Admins can update anything (tenant scope must remain unchanged).
      //  â€¢ Volunteers at the client's location can ONLY change counter/last-visit fields.
      allow update: if isAuthed()
        && request.resource.data.orgId      == resource.data.orgId
        && request.resource.data.locationId == resource.data.locationId
        && (
          // Admin path
          isAdminOfOrg(resource.data.orgId)
          ||
          // Volunteer path: restrict field changes to these keys only
          (
            volunteerHasLocation(resource.data.orgId, resource.data.locationId)
            &&
            request.resource.data.diff(resource.data).changedKeys()
              .hasOnly([
                "visitCountLifetime",
                "visitCountByMonth",
                "lastVisitAt",
                "lastVisitMonthKey",
                "updatedAt",
                "updatedByUserId",
                "householdSize" // optional: keep latest HH from visit workflow
              ])
          )
        );

      // Delete: admin of the org may hard delete
      allow delete: if isAuthed() && isAdminOfOrg(resource.data.orgId);
    }

    /** ============================== visits ================================= */
    match /visits/{visitId} {
      allow read: if isAuthed() && canReadScoped(resource.data.orgId, resource.data.locationId);

      allow create: if isAuthed()
        && hasOrgId()
        && hasLocationId()
        && canWriteScoped(request.resource.data.orgId, request.resource.data.locationId)
        // client must existâ€¦
        && exists(/databases/$(database)/documents/clients/$(request.resource.data.clientId))
        // â€¦and belong to the same org AND location
        && get(/databases/$(database)/documents/clients/$(request.resource.data.clientId)).data.orgId
             == request.resource.data.orgId
        && get(/databases/$(database)/documents/clients/$(request.resource.data.clientId)).data.locationId
             == request.resource.data.locationId;

      // Updates allowed but keep core identity immutable.
      allow update: if isAuthed()
        && canWriteScoped(resource.data.orgId, resource.data.locationId)
        && request.resource.data.clientId   == resource.data.clientId
        && request.resource.data.orgId      == resource.data.orgId
        && request.resource.data.locationId == resource.data.locationId
        && request.resource.data.dateKey    == resource.data.dateKey
        && request.resource.data.monthKey   == resource.data.monthKey;

      // Admins of the org may hard delete visits
      allow delete: if isAuthed() && isAdminOfOrg(resource.data.orgId);
    }

    /** ============================== reports =============================== */
    // Admin-only, org-scoped. (Fix: use request.resource on create.)
    match /reports/{reportId} {
      allow read:    if isAuthed() && isAdminOfOrg(resource.data.orgId);
      allow create:  if isAuthed() && hasOrgId() && isAdminOfOrg(request.resource.data.orgId);
      allow update:  if isAuthed() && isAdminOfOrg(resource.data.orgId);
      allow delete:  if isAuthed() && isAdminOfOrg(resource.data.orgId);
    }

    /** ============================ usda_first =============================== */
    // Restrict reads to the user's org/location (was: any authed user).
    match /usda_first/{markerId} {
      allow read: if isAuthed() && canReadScoped(resource.data.orgId, resource.data.locationId);

      allow create: if isAuthed()
        && hasOrgId()
        && hasLocationId()
        && canWriteScoped(request.resource.data.orgId, request.resource.data.locationId)
        && !exists(/databases/$(database)/documents/usda_first/$(markerId));
      // No updates/deletes.
      allow update, delete: if false;
    }

    /** ============================= Default deny ============================ */
    match /{any=**} {
      allow read, write: if false;
    }
  }
}
